[
  {
    "original": "In the Entities example, we there are some `__tileSrcRect` fields that are null:\r\n\r\nhttps://github.com/deepnight/ldtk/blob/03d51ec1b19275554f0b67b8e56370baca230a44/app/samples/Entities.ldtk#L993-L995\r\n\r\nBut according to the schema that field is required:\r\n\r\nhttps://github.com/deepnight/ldtk/blob/03d51ec1b19275554f0b67b8e56370baca230a44/docs/JSON_SCHEMA.json#L1251-L1254\r\n\r\nMy Rust crate failed to validate the Entities sample because of the difference. It turns out the Rust crate makes a good test-case for the schema. :smile:",
    "noise_removal": "In the Entities example  we there are some  __tileSrcRect  fields that are null \r\n\r\n\r\n\r\nBut according to the schema that field is required \r\n\r\n\r\n\r\nMy Rust crate failed to validate the Entities sample because of the difference  It turns out the Rust crate makes a good test case for the schema   smile ",
    "normalization": "in the entities example  we there are some  __tilesrcrect  fields that are null \r\n\r\n\r\n\r\nbut according to the schema that field is required \r\n\r\n\r\n\r\nmy rust crate failed to validate the entities sample because of the difference  it turns out the rust crate makes a good test case for the schema   smile",
    "tokenization": [
      "in",
      "the",
      "entities",
      "example",
      "we",
      "there",
      "are",
      "some",
      "__tilesrcrect",
      "fields",
      "that",
      "are",
      "null",
      "but",
      "according",
      "to",
      "the",
      "schema",
      "that",
      "field",
      "is",
      "required",
      "my",
      "rust",
      "crate",
      "failed",
      "to",
      "validate",
      "the",
      "entities",
      "sample",
      "because",
      "of",
      "the",
      "difference",
      "it",
      "turns",
      "out",
      "the",
      "rust",
      "crate",
      "makes",
      "a",
      "good",
      "test",
      "case",
      "for",
      "the",
      "schema",
      "smile"
    ],
    "stopword_removal": [
      "entities",
      "example",
      "__tilesrcrect",
      "fields",
      "null",
      "according",
      "schema",
      "field",
      "required",
      "rust",
      "crate",
      "failed",
      "validate",
      "entities",
      "sample",
      "difference",
      "turns",
      "rust",
      "crate",
      "makes",
      "good",
      "test",
      "case",
      "schema",
      "smile"
    ],
    "lemmatization": [
      "entity",
      "example",
      "__tilesrcrect",
      "field",
      "null",
      "according",
      "schema",
      "field",
      "required",
      "rust",
      "crate",
      "failed",
      "validate",
      "entity",
      "sample",
      "difference",
      "turn",
      "rust",
      "crate",
      "make",
      "good",
      "test",
      "case",
      "schema",
      "smile"
    ],
    "final": "entity example __tilesrcrect field null according schema field required rust crate failed validate entity sample difference turn rust crate make good test case schema smile"
  },
  {
    "original": "**Describe the bug**\r\nUpdate the blog link in the entire website to the new link `https://sefglobal.medium.com/`\r\nPlease find the blog page access places in the following places\r\n1) Navigation Bar\r\n2) Footer\r\n\r\n**Expected behavior**\r\nThe blog hyperlink should be redirected to the medium SEF Channel.",
    "noise_removal": "  Describe the bug  \r\nUpdate the blog link in the entire website to the new link  \r\nPlease find the blog page access places in the following places\r\n1  Navigation Bar\r\n2  Footer\r\n\r\n  Expected behavior  \r\nThe blog hyperlink should be redirected to the medium SEF Channel ",
    "normalization": "describe the bug  \r\nupdate the blog link in the entire website to the new link  \r\nplease find the blog page access places in the following places\r\n1  navigation bar\r\n2  footer\r\n\r\n  expected behavior  \r\nthe blog hyperlink should be redirected to the medium sef channel",
    "tokenization": [
      "describe",
      "the",
      "bug",
      "update",
      "the",
      "blog",
      "link",
      "in",
      "the",
      "entire",
      "website",
      "to",
      "the",
      "new",
      "link",
      "please",
      "find",
      "the",
      "blog",
      "page",
      "access",
      "places",
      "in",
      "the",
      "following",
      "places",
      "1",
      "navigation",
      "bar",
      "2",
      "footer",
      "expected",
      "behavior",
      "the",
      "blog",
      "hyperlink",
      "should",
      "be",
      "redirected",
      "to",
      "the",
      "medium",
      "sef",
      "channel"
    ],
    "stopword_removal": [
      "describe",
      "bug",
      "update",
      "blog",
      "link",
      "entire",
      "website",
      "new",
      "link",
      "please",
      "find",
      "blog",
      "page",
      "access",
      "places",
      "following",
      "places",
      "1",
      "navigation",
      "bar",
      "2",
      "footer",
      "expected",
      "behavior",
      "blog",
      "hyperlink",
      "redirected",
      "medium",
      "sef",
      "channel"
    ],
    "lemmatization": [
      "describe",
      "bug",
      "update",
      "blog",
      "link",
      "entire",
      "website",
      "new",
      "link",
      "please",
      "find",
      "blog",
      "page",
      "access",
      "place",
      "following",
      "place",
      "1",
      "navigation",
      "bar",
      "2",
      "footer",
      "expected",
      "behavior",
      "blog",
      "hyperlink",
      "redirected",
      "medium",
      "sef",
      "channel"
    ],
    "final": "describe bug update blog link entire website new link please find blog page access place following place 1 navigation bar 2 footer expected behavior blog hyperlink redirected medium sef channel"
  },
  {
    "original": "Consider these two expressions:\r\n```\r\nf (g x)\r\nf g x\r\n```\r\n\r\nIn the first expression, we can say `f` is a function called with a single argument; the result of evaluating `(g x)`. In JavaScript that would be `f(g(x))`. In the second expression, `f` is a function with _two_ arguments; `g` and `x`. In JavaScript that would be `f(g, x)`. \r\n\r\nObviously these two expressions are different, but attempting to parse them produces the same AST.\r\n```elm\r\n> parse \"f (g x)\"\r\nOk (Application (Variable (Local \"f\")) (Application (Variable (Local \"g\")) (Variable (Local \"x\"))))\r\n    : Result (List Parser.DeadEnd) Cherry.AST.Expression.Expression\r\n\r\n> parse \"f g x\"\r\nOk (Application (Variable (Local \"f\")) (Application (Variable (Local \"g\")) (Variable (Local \"x\"))))\r\n    : Result (List Parser.DeadEnd) Cherry.AST.Expression.Expression\r\n```",
    "noise_removal": "Consider these two expressions \r\n\r\n\r\nIn the first expression  we can say  f  is a function called with a single argument  the result of evaluating   g x    In JavaScript that would be  f g x     In the second expression   f  is a function with _two_ arguments   g  and  x   In JavaScript that would be  f g  x    \r\n\r\nObviously these two expressions are different  but attempting to parse them produces the same AST \r\n",
    "normalization": "consider these two expressions \r\n\r\n\r\nin the first expression  we can say  f  is a function called with a single argument  the result of evaluating   g x    in javascript that would be  f g x     in the second expression   f  is a function with _two_ arguments   g  and  x   in javascript that would be  f g  x    \r\n\r\nobviously these two expressions are different  but attempting to parse them produces the same ast",
    "tokenization": [
      "consider",
      "these",
      "two",
      "expressions",
      "in",
      "the",
      "first",
      "expression",
      "we",
      "can",
      "say",
      "f",
      "is",
      "a",
      "function",
      "called",
      "with",
      "a",
      "single",
      "argument",
      "the",
      "result",
      "of",
      "evaluating",
      "g",
      "x",
      "in",
      "javascript",
      "that",
      "would",
      "be",
      "f",
      "g",
      "x",
      "in",
      "the",
      "second",
      "expression",
      "f",
      "is",
      "a",
      "function",
      "with",
      "_two_",
      "arguments",
      "g",
      "and",
      "x",
      "in",
      "javascript",
      "that",
      "would",
      "be",
      "f",
      "g",
      "x",
      "obviously",
      "these",
      "two",
      "expressions",
      "are",
      "different",
      "but",
      "attempting",
      "to",
      "parse",
      "them",
      "produces",
      "the",
      "same",
      "ast"
    ],
    "stopword_removal": [
      "consider",
      "two",
      "expressions",
      "first",
      "expression",
      "say",
      "f",
      "function",
      "called",
      "single",
      "argument",
      "result",
      "evaluating",
      "g",
      "x",
      "javascript",
      "would",
      "f",
      "g",
      "x",
      "second",
      "expression",
      "f",
      "function",
      "_two_",
      "arguments",
      "g",
      "x",
      "javascript",
      "would",
      "f",
      "g",
      "x",
      "obviously",
      "two",
      "expressions",
      "different",
      "attempting",
      "parse",
      "produces",
      "ast"
    ],
    "lemmatization": [
      "consider",
      "two",
      "expression",
      "first",
      "expression",
      "say",
      "f",
      "function",
      "called",
      "single",
      "argument",
      "result",
      "evaluating",
      "g",
      "x",
      "javascript",
      "would",
      "f",
      "g",
      "x",
      "second",
      "expression",
      "f",
      "function",
      "_two_",
      "argument",
      "g",
      "x",
      "javascript",
      "would",
      "f",
      "g",
      "x",
      "obviously",
      "two",
      "expression",
      "different",
      "attempting",
      "parse",
      "produce",
      "ast"
    ],
    "final": "consider two expression first expression say f function called single argument result evaluating g x javascript would f g x second expression f function _two_ argument g x javascript would f g x obviously two expression different attempting parse produce ast"
  }
]